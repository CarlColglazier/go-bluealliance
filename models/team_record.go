package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TeamRecord team record
// swagger:model TeamRecord
type TeamRecord struct {

	// Number of losses
	// Required: true
	Losses *int64 `json:"losses"`

	// Number of ties
	// Required: true
	Ties *int64 `json:"ties"`

	// Number of wins
	// Required: true
	Wins *int64 `json:"wins"`
}

// Validate validates this team record
func (m *TeamRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLosses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTies(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWins(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamRecord) validateLosses(formats strfmt.Registry) error {

	if err := validate.Required("losses", "body", m.Losses); err != nil {
		return err
	}

	return nil
}

func (m *TeamRecord) validateTies(formats strfmt.Registry) error {

	if err := validate.Required("ties", "body", m.Ties); err != nil {
		return err
	}

	return nil
}

func (m *TeamRecord) validateWins(formats strfmt.Registry) error {

	if err := validate.Required("wins", "body", m.Wins); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamRecord) UnmarshalBinary(b []byte) error {
	var res TeamRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
