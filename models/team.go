package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Team team
// swagger:model Team
type Team struct {

	// Street address for this team
	Address string `json:"address,omitempty"`

	// URL for this team on Google Maps
	GmapsURL string `json:"gmaps_url,omitempty"`

	// TBA team key with the format frcyyyy
	// Required: true
	Key *string `json:"key"`

	// Name of where this team is based
	LocationName string `json:"location_name,omitempty"`

	// Team's motto as provided by FIRST
	Motto string `json:"motto,omitempty"`

	// Official long name registerd with FIRST
	// Required: true
	Name *string `json:"name"`

	// Team nickname provided by FIRST
	Nickname string `json:"nickname,omitempty"`

	// First year the team officially competed
	RookieYear int64 `json:"rookie_year,omitempty"`

	// Official team number issued by FIRST
	// Required: true
	TeamNumber *int64 `json:"team_number"`

	// Official website associatd with the team
	Website string `json:"website,omitempty"`
}

// Validate validates this team
func (m *Team) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeamNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Team) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *Team) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Team) validateTeamNumber(formats strfmt.Registry) error {

	if err := validate.Required("team_number", "body", m.TeamNumber); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Team) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Team) UnmarshalBinary(b []byte) error {
	var res Team
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
