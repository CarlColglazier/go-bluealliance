package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DistrictRanking district ranking
// swagger:model DistrictRanking
type DistrictRanking struct {

	// event points
	// Required: true
	EventPoints []*DistrictRankingEventPointsItems0 `json:"event_points"`

	// Number of points earned, in total
	// Required: true
	PointTotal *int64 `json:"point_total"`

	// Ranking of this team in the district
	// Required: true
	Rank *int64 `json:"rank"`

	// Extra points based on begin a first or second year team
	// Required: true
	RookieBonus *int64 `json:"rookie_bonus"`

	// Team these rankings are for
	// Required: true
	TeamKey *string `json:"team_key"`
}

// Validate validates this district ranking
func (m *DistrictRanking) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventPoints(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePointTotal(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRank(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRookieBonus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeamKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DistrictRanking) validateEventPoints(formats strfmt.Registry) error {

	if err := validate.Required("event_points", "body", m.EventPoints); err != nil {
		return err
	}

	for i := 0; i < len(m.EventPoints); i++ {

		if swag.IsZero(m.EventPoints[i]) { // not required
			continue
		}

		if m.EventPoints[i] != nil {

			if err := m.EventPoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("event_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DistrictRanking) validatePointTotal(formats strfmt.Registry) error {

	if err := validate.Required("point_total", "body", m.PointTotal); err != nil {
		return err
	}

	return nil
}

func (m *DistrictRanking) validateRank(formats strfmt.Registry) error {

	if err := validate.Required("rank", "body", m.Rank); err != nil {
		return err
	}

	return nil
}

func (m *DistrictRanking) validateRookieBonus(formats strfmt.Registry) error {

	if err := validate.Required("rookie_bonus", "body", m.RookieBonus); err != nil {
		return err
	}

	return nil
}

func (m *DistrictRanking) validateTeamKey(formats strfmt.Registry) error {

	if err := validate.Required("team_key", "body", m.TeamKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DistrictRanking) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DistrictRanking) UnmarshalBinary(b []byte) error {
	var res DistrictRanking
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DistrictRankingEventPointsItems0 DistrictEventPoints
// swagger:model DistrictRankingEventPointsItems0
type DistrictRankingEventPointsItems0 struct {

	// Number of points from alliance selection
	// Required: true
	AlliancePoints *int64 `json:"alliance_points"`

	// Number of points from awards
	// Required: true
	AwardPoints *int64 `json:"award_points"`

	// Does this event get the District CMP multiplier?
	// Required: true
	DistrictCmp *bool `json:"district_cmp"`

	// Number of points from playoff matches
	// Required: true
	ElimPoints *int64 `json:"elim_points"`

	// Event where these points were earned
	// Required: true
	EventKey *string `json:"event_key"`

	// Number of points from qualification matches
	// Required: true
	QualPoints *int64 `json:"qual_points"`

	// Total number of points from this event
	// Required: true
	Total *int64 `json:"total"`
}

// Validate validates this district ranking event points items0
func (m *DistrictRankingEventPointsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlliancePoints(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAwardPoints(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDistrictCmp(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateElimPoints(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEventKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQualPoints(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DistrictRankingEventPointsItems0) validateAlliancePoints(formats strfmt.Registry) error {

	if err := validate.Required("alliance_points", "body", m.AlliancePoints); err != nil {
		return err
	}

	return nil
}

func (m *DistrictRankingEventPointsItems0) validateAwardPoints(formats strfmt.Registry) error {

	if err := validate.Required("award_points", "body", m.AwardPoints); err != nil {
		return err
	}

	return nil
}

func (m *DistrictRankingEventPointsItems0) validateDistrictCmp(formats strfmt.Registry) error {

	if err := validate.Required("district_cmp", "body", m.DistrictCmp); err != nil {
		return err
	}

	return nil
}

func (m *DistrictRankingEventPointsItems0) validateElimPoints(formats strfmt.Registry) error {

	if err := validate.Required("elim_points", "body", m.ElimPoints); err != nil {
		return err
	}

	return nil
}

func (m *DistrictRankingEventPointsItems0) validateEventKey(formats strfmt.Registry) error {

	if err := validate.Required("event_key", "body", m.EventKey); err != nil {
		return err
	}

	return nil
}

func (m *DistrictRankingEventPointsItems0) validateQualPoints(formats strfmt.Registry) error {

	if err := validate.Required("qual_points", "body", m.QualPoints); err != nil {
		return err
	}

	return nil
}

func (m *DistrictRankingEventPointsItems0) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DistrictRankingEventPointsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DistrictRankingEventPointsItems0) UnmarshalBinary(b []byte) error {
	var res DistrictRankingEventPointsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
