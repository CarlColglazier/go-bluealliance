package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventAlliance event alliance
// swagger:model EventAlliance
type EventAlliance struct {

	// backup
	Backup *AllianceBackup `json:"backup,omitempty"`

	// declines
	Declines []string `json:"declines"`

	// Name of this alliance that can be displayed
	Name string `json:"name,omitempty"`

	// picks
	// Required: true
	Picks []string `json:"picks"`

	// status
	Status *TeamAtEventPlayoff `json:"status,omitempty"`
}

// Validate validates this event alliance
func (m *EventAlliance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDeclines(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePicks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventAlliance) validateBackup(formats strfmt.Registry) error {

	if swag.IsZero(m.Backup) { // not required
		return nil
	}

	if m.Backup != nil {

		if err := m.Backup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup")
			}
			return err
		}
	}

	return nil
}

func (m *EventAlliance) validateDeclines(formats strfmt.Registry) error {

	if swag.IsZero(m.Declines) { // not required
		return nil
	}

	return nil
}

func (m *EventAlliance) validatePicks(formats strfmt.Registry) error {

	if err := validate.Required("picks", "body", m.Picks); err != nil {
		return err
	}

	return nil
}

func (m *EventAlliance) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventAlliance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventAlliance) UnmarshalBinary(b []byte) error {
	var res EventAlliance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
