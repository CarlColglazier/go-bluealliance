package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Media media
// swagger:model Media
type Media struct {

	// If the media requires it, a json dict of additional information
	Details string `json:"details,omitempty"`

	// The key used to indentify this media element on the remote site (e.g YouTube video key)
	// Required: true
	ForeignKey *string `json:"foreign_key"`

	// Is this a high quality robot picture
	// Required: true
	Preferred *bool `json:"preferred"`

	// The string type of the media element
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this media
func (m *Media) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForeignKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePreferred(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Media) validateForeignKey(formats strfmt.Registry) error {

	if err := validate.Required("foreign_key", "body", m.ForeignKey); err != nil {
		return err
	}

	return nil
}

func (m *Media) validatePreferred(formats strfmt.Registry) error {

	if err := validate.Required("preferred", "body", m.Preferred); err != nil {
		return err
	}

	return nil
}

func (m *Media) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Media) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Media) UnmarshalBinary(b []byte) error {
	var res Media
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
