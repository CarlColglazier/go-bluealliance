package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Robot robot
// swagger:model Robot
type Robot struct {

	// A key identifying the robot object. Formed like [team_key]_[year]
	// Required: true
	Key *string `json:"key"`

	// The robot name in this year
	// Required: true
	Name *string `json:"name"`

	// The associated Team key
	// Required: true
	TeamKey *string `json:"team_key"`

	// The year this Robot model referes to
	// Required: true
	Year *int64 `json:"year"`
}

// Validate validates this robot
func (m *Robot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeamKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Robot) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *Robot) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Robot) validateTeamKey(formats strfmt.Registry) error {

	if err := validate.Required("team_key", "body", m.TeamKey); err != nil {
		return err
	}

	return nil
}

func (m *Robot) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Robot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Robot) UnmarshalBinary(b []byte) error {
	var res Robot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
