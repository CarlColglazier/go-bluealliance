package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RankingItem ranking item
// swagger:model RankingItem
type RankingItem struct {

	// Number of times the team was disqualified from a match
	// Required: true
	Dq *int64 `json:"dq"`

	// Year-specific values unofficially calculated by TBA
	// Required: true
	ExtraStats []float64 `json:"extra_stats"`

	// Number of matches this team has played
	// Required: true
	MatchesPlayed *int64 `json:"matches_played"`

	// For some years, average qualification score
	QualAverage float64 `json:"qual_average,omitempty"`

	// Ranking of this team
	// Required: true
	Rank *int64 `json:"rank"`

	// record
	// Required: true
	Record *TeamRecord `json:"record"`

	// Year-specific ranking values
	// Required: true
	SortOrders []float64 `json:"sort_orders"`

	// Team this item is for
	// Required: true
	TeamKey *string `json:"team_key"`
}

// Validate validates this ranking item
func (m *RankingItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDq(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExtraStats(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMatchesPlayed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRank(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRecord(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSortOrders(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeamKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RankingItem) validateDq(formats strfmt.Registry) error {

	if err := validate.Required("dq", "body", m.Dq); err != nil {
		return err
	}

	return nil
}

func (m *RankingItem) validateExtraStats(formats strfmt.Registry) error {

	if err := validate.Required("extra_stats", "body", m.ExtraStats); err != nil {
		return err
	}

	return nil
}

func (m *RankingItem) validateMatchesPlayed(formats strfmt.Registry) error {

	if err := validate.Required("matches_played", "body", m.MatchesPlayed); err != nil {
		return err
	}

	return nil
}

func (m *RankingItem) validateRank(formats strfmt.Registry) error {

	if err := validate.Required("rank", "body", m.Rank); err != nil {
		return err
	}

	return nil
}

func (m *RankingItem) validateRecord(formats strfmt.Registry) error {

	if err := validate.Required("record", "body", m.Record); err != nil {
		return err
	}

	if m.Record != nil {

		if err := m.Record.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("record")
			}
			return err
		}
	}

	return nil
}

func (m *RankingItem) validateSortOrders(formats strfmt.Registry) error {

	if err := validate.Required("sort_orders", "body", m.SortOrders); err != nil {
		return err
	}

	return nil
}

func (m *RankingItem) validateTeamKey(formats strfmt.Registry) error {

	if err := validate.Required("team_key", "body", m.TeamKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RankingItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RankingItem) UnmarshalBinary(b []byte) error {
	var res RankingItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
