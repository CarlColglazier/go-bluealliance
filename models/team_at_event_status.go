package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TeamAtEventStatus team at event status
// swagger:model TeamAtEventStatus
type TeamAtEventStatus struct {

	// alliance
	Alliance *TeamAtEventStatusAlliance `json:"alliance,omitempty"`

	// alliance status str
	// Required: true
	AllianceStatusStr *string `json:"alliance_status_str"`

	// overall status str
	// Required: true
	OverallStatusStr *string `json:"overall_status_str"`

	// playoff
	Playoff *TeamAtEventPlayoff `json:"playoff,omitempty"`

	// qual
	Qual *TeamAtEventStatusQual `json:"qual,omitempty"`
}

// Validate validates this team at event status
func (m *TeamAtEventStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlliance(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAllianceStatusStr(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOverallStatusStr(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlayoff(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQual(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamAtEventStatus) validateAlliance(formats strfmt.Registry) error {

	if swag.IsZero(m.Alliance) { // not required
		return nil
	}

	if m.Alliance != nil {

		if err := m.Alliance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alliance")
			}
			return err
		}
	}

	return nil
}

func (m *TeamAtEventStatus) validateAllianceStatusStr(formats strfmt.Registry) error {

	if err := validate.Required("alliance_status_str", "body", m.AllianceStatusStr); err != nil {
		return err
	}

	return nil
}

func (m *TeamAtEventStatus) validateOverallStatusStr(formats strfmt.Registry) error {

	if err := validate.Required("overall_status_str", "body", m.OverallStatusStr); err != nil {
		return err
	}

	return nil
}

func (m *TeamAtEventStatus) validatePlayoff(formats strfmt.Registry) error {

	if swag.IsZero(m.Playoff) { // not required
		return nil
	}

	if m.Playoff != nil {

		if err := m.Playoff.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("playoff")
			}
			return err
		}
	}

	return nil
}

func (m *TeamAtEventStatus) validateQual(formats strfmt.Registry) error {

	if swag.IsZero(m.Qual) { // not required
		return nil
	}

	if m.Qual != nil {

		if err := m.Qual.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qual")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamAtEventStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamAtEventStatus) UnmarshalBinary(b []byte) error {
	var res TeamAtEventStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TeamAtEventStatusAlliance TeamAtEventAlliance
// swagger:model TeamAtEventStatusAlliance
type TeamAtEventStatusAlliance struct {

	// backup
	Backup *AllianceBackup `json:"backup,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// number
	// Required: true
	Number *int64 `json:"number"`

	// pick
	// Required: true
	Pick *int64 `json:"pick"`
}

// Validate validates this team at event status alliance
func (m *TeamAtEventStatusAlliance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePick(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamAtEventStatusAlliance) validateBackup(formats strfmt.Registry) error {

	if swag.IsZero(m.Backup) { // not required
		return nil
	}

	if m.Backup != nil {

		if err := m.Backup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alliance" + "." + "backup")
			}
			return err
		}
	}

	return nil
}

func (m *TeamAtEventStatusAlliance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("alliance"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TeamAtEventStatusAlliance) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("alliance"+"."+"number", "body", m.Number); err != nil {
		return err
	}

	return nil
}

func (m *TeamAtEventStatusAlliance) validatePick(formats strfmt.Registry) error {

	if err := validate.Required("alliance"+"."+"pick", "body", m.Pick); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamAtEventStatusAlliance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamAtEventStatusAlliance) UnmarshalBinary(b []byte) error {
	var res TeamAtEventStatusAlliance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TeamAtEventStatusQual TeamAtEventQual
// swagger:model TeamAtEventStatusQual
type TeamAtEventStatusQual struct {

	// num teams
	// Required: true
	NumTeams *int64 `json:"num_teams"`

	// ranking
	// Required: true
	Ranking *RankingItem `json:"ranking"`

	// sort order info
	// Required: true
	SortOrderInfo []*RankingSortOrder `json:"sort_order_info"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this team at event status qual
func (m *TeamAtEventStatusQual) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNumTeams(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRanking(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSortOrderInfo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamAtEventStatusQual) validateNumTeams(formats strfmt.Registry) error {

	if err := validate.Required("qual"+"."+"num_teams", "body", m.NumTeams); err != nil {
		return err
	}

	return nil
}

func (m *TeamAtEventStatusQual) validateRanking(formats strfmt.Registry) error {

	if err := validate.Required("qual"+"."+"ranking", "body", m.Ranking); err != nil {
		return err
	}

	if m.Ranking != nil {

		if err := m.Ranking.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qual" + "." + "ranking")
			}
			return err
		}
	}

	return nil
}

func (m *TeamAtEventStatusQual) validateSortOrderInfo(formats strfmt.Registry) error {

	if err := validate.Required("qual"+"."+"sort_order_info", "body", m.SortOrderInfo); err != nil {
		return err
	}

	for i := 0; i < len(m.SortOrderInfo); i++ {

		if swag.IsZero(m.SortOrderInfo[i]) { // not required
			continue
		}

		if m.SortOrderInfo[i] != nil {

			if err := m.SortOrderInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("qual" + "." + "sort_order_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TeamAtEventStatusQual) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("qual"+"."+"status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamAtEventStatusQual) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamAtEventStatusQual) UnmarshalBinary(b []byte) error {
	var res TeamAtEventStatusQual
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
