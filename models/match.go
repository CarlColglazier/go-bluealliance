package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Match match
// swagger:model Match
type Match struct {

	// UNIX timestamp of when the match actually started
	ActualTime int64 `json:"actual_time,omitempty"`

	// alliances
	Alliances *MatchAlliances `json:"alliances,omitempty"`

	// The competition level the match was played at.
	// Required: true
	CompLevel *string `json:"comp_level"`

	// Event key of the event the match was played at.
	// Required: true
	EventKey *string `json:"event_key"`

	// TBA event key with the format yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER], where yyyy is the year, and EVENT_CODE is the event code of the event, COMP_LEVEL is (qm, ef, qf, sf, f), and MATCH_NUMBER is the match number in the competition level. A set number may append the competition level if more than one match in required per set .
	// Required: true
	Key *string `json:"key"`

	// The match number of the match in the competition level.
	// Required: true
	MatchNumber *int64 `json:"match_number"`

	// Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null.
	ScoreBreakdown string `json:"score_breakdown,omitempty"`

	// The set number in a series of matches where more than one match is required in the match series.
	// Required: true
	SetNumber *int64 `json:"set_number"`

	// UNIX timestamp of match time, as taken from the published schedule
	Time int64 `json:"time,omitempty"`

	// videos
	Videos []*MatchVideosItems0 `json:"videos"`

	// Which alliance won
	WinningAlliance string `json:"winning_alliance,omitempty"`
}

// Validate validates this match
func (m *Match) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlliances(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompLevel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEventKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMatchNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSetNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVideos(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Match) validateAlliances(formats strfmt.Registry) error {

	if swag.IsZero(m.Alliances) { // not required
		return nil
	}

	if m.Alliances != nil {

		if err := m.Alliances.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alliances")
			}
			return err
		}
	}

	return nil
}

func (m *Match) validateCompLevel(formats strfmt.Registry) error {

	if err := validate.Required("comp_level", "body", m.CompLevel); err != nil {
		return err
	}

	return nil
}

func (m *Match) validateEventKey(formats strfmt.Registry) error {

	if err := validate.Required("event_key", "body", m.EventKey); err != nil {
		return err
	}

	return nil
}

func (m *Match) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *Match) validateMatchNumber(formats strfmt.Registry) error {

	if err := validate.Required("match_number", "body", m.MatchNumber); err != nil {
		return err
	}

	return nil
}

func (m *Match) validateSetNumber(formats strfmt.Registry) error {

	if err := validate.Required("set_number", "body", m.SetNumber); err != nil {
		return err
	}

	return nil
}

func (m *Match) validateVideos(formats strfmt.Registry) error {

	if swag.IsZero(m.Videos) { // not required
		return nil
	}

	for i := 0; i < len(m.Videos); i++ {

		if swag.IsZero(m.Videos[i]) { // not required
			continue
		}

		if m.Videos[i] != nil {

			if err := m.Videos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("videos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Match) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Match) UnmarshalBinary(b []byte) error {
	var res Match
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MatchAlliances MatchAlliancesContainer
// swagger:model MatchAlliances
type MatchAlliances struct {

	// blue
	// Required: true
	Blue *MatchAlliance `json:"blue"`

	// red
	// Required: true
	Red *MatchAlliance `json:"red"`
}

// Validate validates this match alliances
func (m *MatchAlliances) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchAlliances) validateBlue(formats strfmt.Registry) error {

	if err := validate.Required("alliances"+"."+"blue", "body", m.Blue); err != nil {
		return err
	}

	if m.Blue != nil {

		if err := m.Blue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alliances" + "." + "blue")
			}
			return err
		}
	}

	return nil
}

func (m *MatchAlliances) validateRed(formats strfmt.Registry) error {

	if err := validate.Required("alliances"+"."+"red", "body", m.Red); err != nil {
		return err
	}

	if m.Red != nil {

		if err := m.Red.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alliances" + "." + "red")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MatchAlliances) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MatchAlliances) UnmarshalBinary(b []byte) error {
	var res MatchAlliances
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MatchVideosItems0 MatchVideo
// swagger:model MatchVideosItems0
type MatchVideosItems0 struct {

	// key
	// Required: true
	Key *string `json:"key"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this match videos items0
func (m *MatchVideosItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchVideosItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *MatchVideosItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MatchVideosItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MatchVideosItems0) UnmarshalBinary(b []byte) error {
	var res MatchVideosItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
