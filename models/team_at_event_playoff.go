package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TeamAtEventPlayoff team at event playoff
// swagger:model TeamAtEventPlayoff
type TeamAtEventPlayoff struct {

	// current level record
	CurrentLevelRecord *TeamRecord `json:"current_level_record,omitempty"`

	// level
	// Required: true
	Level *string `json:"level"`

	// playoff average
	PlayoffAverage float64 `json:"playoff_average,omitempty"`

	// record
	Record *TeamRecord `json:"record,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this team at event playoff
func (m *TeamAtEventPlayoff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentLevelRecord(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRecord(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TeamAtEventPlayoff) validateCurrentLevelRecord(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentLevelRecord) { // not required
		return nil
	}

	if m.CurrentLevelRecord != nil {

		if err := m.CurrentLevelRecord.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_level_record")
			}
			return err
		}
	}

	return nil
}

func (m *TeamAtEventPlayoff) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

func (m *TeamAtEventPlayoff) validateRecord(formats strfmt.Registry) error {

	if swag.IsZero(m.Record) { // not required
		return nil
	}

	if m.Record != nil {

		if err := m.Record.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("record")
			}
			return err
		}
	}

	return nil
}

func (m *TeamAtEventPlayoff) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TeamAtEventPlayoff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamAtEventPlayoff) UnmarshalBinary(b []byte) error {
	var res TeamAtEventPlayoff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
