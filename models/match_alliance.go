package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MatchAlliance match alliance
// swagger:model MatchAlliance
type MatchAlliance struct {

	// score
	// Required: true
	Score *int64 `json:"score"`

	// surrogate team keys
	SurrogateTeamKeys []string `json:"surrogate_team_keys"`

	// team keys
	// Required: true
	TeamKeys []string `json:"team_keys"`
}

// Validate validates this match alliance
func (m *MatchAlliance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScore(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSurrogateTeamKeys(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTeamKeys(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MatchAlliance) validateScore(formats strfmt.Registry) error {

	if err := validate.Required("score", "body", m.Score); err != nil {
		return err
	}

	return nil
}

func (m *MatchAlliance) validateSurrogateTeamKeys(formats strfmt.Registry) error {

	if swag.IsZero(m.SurrogateTeamKeys) { // not required
		return nil
	}

	return nil
}

func (m *MatchAlliance) validateTeamKeys(formats strfmt.Registry) error {

	if err := validate.Required("team_keys", "body", m.TeamKeys); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MatchAlliance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MatchAlliance) UnmarshalBinary(b []byte) error {
	var res MatchAlliance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
